// ==UserScript==
// @name        Tribal Wars Automation
// @namespace   http://tampermonkey.net/
// @version     3.0
// @description Script para Tribal Wars com atualiza√ß√µes autom√°ticas do GitHub.
// @author      Voc√™
// @match       https://*.tribalwars.com.br/*
// @grant       none
// @updateURL   https://raw.githubusercontent.com/seu-usuario/TribalWars-Automation/main/tribalwars-automation.user.js
// @downloadURL https://raw.githubusercontent.com/seu-usuario/TribalWars-Automation/main/tribalwars-automation.user.js
// ==/UserScript==





(async function () {
    'use strict';

    const jogadorAutorizado = "mokotot";
    const licenseKey = "12345-ABCDE";
    const urlPlanilha = "https://docs.google.com/spreadsheets/d/1tu9YsAtszdCXe31l1zrn5Er-ze6Xg3qdoDsu13zi4kA/export?format=csv";
    const updateSheetURL = "https://script.google.com/macros/s/AKfycbwOLw5iU6kcMyCE1yT3ByeCh-MeBlVoxQoUj3SHMO8uCW1I5KtX1LO1Q9RcwjrNJXksgg/exec";
    const whatsappLink = "https://wa.me/5562996354890?text=Ol%C3%A1!%20Preciso%20de%20ajuda%20com%20minha%20licen%C3%A7a.";

    async function verificarLicenca() {
        const agora = Math.floor(Date.now() / 1000);
        try {
            const response = await fetch(urlPlanilha);
            if (!response.ok) throw new Error("‚ùå Erro ao acessar a planilha de licen√ßas.");
            const data = await response.text();
            const linhas = data.split('\n').map(row => row.split(','));

            for (const linha of linhas) {
                const [username, chave, tempoExpiracao, , , renovacaoManual] = linha.map(cell => cell.trim());
                const expiraEm = parseInt(tempoExpiracao, 10);
                const renovacaoTimestamp = parseInt(renovacaoManual, 10) || null;

                if (username === jogadorAutorizado && chave === licenseKey) {
                    let novaExpiracao = expiraEm;
                    if (renovacaoTimestamp && renovacaoTimestamp > agora) {
                        novaExpiracao = renovacaoTimestamp;
                        localStorage.setItem('licencaExpirada', novaExpiracao);
                    }

                    if (novaExpiracao > agora) {
                        const tempoRestante = formatarTempo(novaExpiracao - agora);
                        await atualizarStatusPlanilha("Online", tempoRestante);
                        console.log(`‚úÖ Licen√ßa v√°lida! Expira em: ${tempoRestante}`);
                        return;
                    }
                }
            }
            bloquearScript("‚ö†Ô∏è Licen√ßa Expirada ou Inv√°lida.");
        } catch (error) {
            bloquearScript(`‚ùå Erro ao validar a licen√ßa: ${error.message}`);
        }
    }

    async function atualizarStatusPlanilha(status, tempoRestante) {
        try {
            await fetch(updateSheetURL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    username: jogadorAutorizado,
                    licenseKey: licenseKey,
                    status: status,
                    tempoRestante: tempoRestante
                })
            });
        } catch (error) {
            console.error("‚ùå Erro ao atualizar a planilha:", error);
        }
    }

    function formatarTempo(segundos) {
        const minutos = Math.floor(segundos / 60);
        const seg = Math.floor(segundos % 60);
        return `${minutos}min ${seg}s`;
    }

    function bloquearScript(mensagem) {
        document.body.innerHTML = `
            <div style="
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                height: 100vh;
                background: radial-gradient(circle, #1E1E2F, #0F0F1A);
                color: white;
                font-family: 'Poppins', sans-serif;
                text-align: center;
                padding: 20px;
            ">
                <div style="
                    max-width: 600px;
                    padding: 40px;
                    border-radius: 20px;
                    background: linear-gradient(145deg, #3a7bd5, #4f4fbd);
                    box-shadow: 0 0 40px rgba(0,0,0,0.5);
                ">
                    <h1 style="font-size: 3rem; margin-bottom: 10px;">‚ö†Ô∏è Licen√ßa Bloqueada</h1>
                    <p style="font-size: 1.2rem; margin-bottom: 20px;">${mensagem}</p>
                    <a href="${whatsappLink}" target="_blank" style="
                        display: inline-block;
                        padding: 15px 35px;
                        background: linear-gradient(135deg, #00b4db, #0083b0);
                        color: white;
                        border-radius: 50px;
                        font-size: 1.2rem;
                        font-weight: bold;
                        text-decoration: none;
                        box-shadow: 0 0 20px rgba(0,0,0,0.2);
                        transition: transform 0.2s ease, box-shadow 0.2s ease;
                    " onmouseover="this.style.transform='scale(1.1)'; this.style.boxShadow='0 0 30px rgba(0,0,0,0.5)';"
                    onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0 20px rgba(0,0,0,0.2)';">
                        üì≤ Iniciar Conversa no WhatsApp
                    </a>
                </div>
            </div>
        `;
        localStorage.setItem('licencaExpirada', Math.floor(Date.now() / 1000));
        throw new Error(mensagem);
    }

    await verificarLicenca();
    setInterval(verificarLicenca, 30000);
})();



























// Cria um elemento <style> para adicionar regras de CSS personalizadas √† p√°gina.
const style = document.createElement('style');
style.textContent = `
    /* Container dos cart√µes com rolagem */
    #construction-orders-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 16px;
        padding: 10px;
        max-height: 400px; /* Limite de altura */
        overflow-y: auto; /* Rolagem vertical */
        background: linear-gradient(135deg, #f0f4f8, #d9e2ec);
        border: 2px solid #3498db;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }


    /* Estilo b√°sico dos cart√µes */
    .draggable-card {
        position: relative;
        border: none;
        border-radius: 12px;
        padding: 16px;
        background: linear-gradient(135deg, #ffffff, #f9f9f9);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #2c3e50;
        cursor: grab;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }


    /* √çcone do edif√≠cio */
    .draggable-card .icon {
        font-size: 40px;
        margin-bottom: 8px;
        color: #3498db;
    }


    /* Nome do edif√≠cio */
    .draggable-card .name {
        font-weight: bold;
        font-size: 16px;
        margin-bottom: 4px;
        color: #2c3e50;
        text-transform: capitalize;
    }


    /* N√≠vel do edif√≠cio */
    .draggable-card .level {
        font-size: 14px;
        color: #7f8c8d;
    }


    /* Efeito ao passar o mouse */
    .draggable-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
        background: linear-gradient(135deg, #e3f2fd, #ffffff);
    }


    /* Bot√£o de fechar e salvar */
    #save-order, #close-popup-orders {
        margin-top: 10px;
    }


    /* Scrollbar personalizada */
    #construction-orders-container::-webkit-scrollbar {
        width: 8px;
    }
    #construction-orders-container::-webkit-scrollbar-track {
        background: #f0f4f8;
        border-radius: 10px;
    }
    #construction-orders-container::-webkit-scrollbar-thumb {
        background: #3498db;
        border-radius: 10px;
    }
    #construction-orders-container::-webkit-scrollbar-thumb:hover {
        background: #2c81ba;
    }
`;
document.head.appendChild(style);










(function () {
    'use strict';


    // URLs para redirecionamento
    const urls = {
    "Edif√≠cio Principal": "screen=main",
    Recrutamento: "screen=train",
    Coleta: "screen=place&mode=scavenge_mass",
    Ferreiro: "screen=smith",
    "Criar ofertas": "screen=market&mode=mass_create_offers",
    "Aceitar ofertas": "screen=market&mode=other_offer&action=search",
    "Vender por pps": "screen=market&mode=exchange",
    Farm: "screen=am_farm",
    "Login Autom√°tico": "" // Aqui voc√™ pode adicionar o redirecionamento necess√°rio
};




    // Configura√ß√µes espec√≠ficas de recrutamento
    let recruitmentConfig = {
        spear: 0,
        sword: 0,
        axe: 0,
        light: 0
    };


    // Lista de fun√ß√µes ativas
    let activeFunctions = [];


    // Salva as fun√ß√µes ativas no armazenamento local
    function saveActiveFunctions() {
        localStorage.setItem('activeFunctions', JSON.stringify(activeFunctions));
    }


    // Salva as configura√ß√µes de recrutamento no armazenamento local
    function saveRecruitmentConfig() {
        localStorage.setItem('recruitmentConfig', JSON.stringify(recruitmentConfig));
    }


    // Carrega as fun√ß√µes ativas do armazenamento local
    function loadActiveFunctions() {
        const saved = localStorage.getItem('activeFunctions');
        if (saved) activeFunctions = JSON.parse(saved);
    }


    // Carrega as configura√ß√µes de recrutamento do armazenamento local
    function loadRecruitmentConfig() {
        const saved = localStorage.getItem('recruitmentConfig');
        if (saved) recruitmentConfig = JSON.parse(saved);
    }


    // Fun√ß√£o para criar pop-ups
    function createPopup(content) {
        const existingPopup = document.getElementById('custom-popup');
        if (existingPopup) existingPopup.remove();


        const popup = document.createElement('div');
        popup.id = 'custom-popup';
        popup.style.position = 'fixed';
        popup.style.top = '50%';
        popup.style.left = '50%';
        popup.style.transform = 'translate(-50%, -50%)';
        popup.style.backgroundColor = '#fff';
        popup.style.border = '2px solid #000';
        popup.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        popup.style.padding = '20px';
        popup.style.zIndex = '10000';
        popup.style.borderRadius = '8px';
        popup.style.fontFamily = 'Arial, sans-serif';
        popup.style.textAlign = 'center';
        popup.style.width = '400px';
        popup.innerHTML = content;


        document.body.appendChild(popup);
        return popup;
    }


    // Fun√ß√£o para fechar o pop-up
    function closePopup() {
        const popup = document.getElementById('custom-popup');
        if (popup) popup.remove();
    }




























// Redireciona aleatoriamente para fun√ß√µes ativas
function redirectRandomly() {
    if (activeFunctions.length > 0) {
        const randomFunction = activeFunctions[Math.floor(Math.random() * activeFunctions.length)];


        // Verifica se o Login Autom√°tico est√° ativado antes de chamar a fun√ß√£o
        if (randomFunction === "Login Autom√°tico" && activeFunctions.includes("Login Autom√°tico")) {
            performAutoLogin();
        } else {
            redirectTo(urls[randomFunction]);
        }
    }
}


// Fun√ß√£o para realizar o login autom√°tico sempre que o bot√£o estiver dispon√≠vel
function performAutoLogin() {
    const worldButtons = document.querySelectorAll('span.world_button_active');


    for (const button of worldButtons) {
        if (button.textContent.trim() === 'Mundo 131') {
            button.click();
            console.log('Clicou no bot√£o "Mundo 131"');
            return;
        }
    }


    console.log('Bot√£o "Mundo 131" n√£o encontrado');
}


// Inicia a automa√ß√£o de login ao carregar a p√°gina
window.addEventListener('load', performAutoLogin);






















    // Redireciona para uma URL espec√≠fica
    function redirectTo(screen) {
        const villageId = new URLSearchParams(window.location.search).get('village');
        const url = `https://br131.tribalwars.com.br/game.php?village=${villageId}&${screen}`;
        const randomTime = Math.floor(Math.random() * 11 + 10) * 1000; // 10 a 20 segundos
        setTimeout(() => window.location.href = url, randomTime);
    }


    // Inicia o redirecionamento autom√°tico
    function startAutoRedirect() {
        if (activeFunctions.length > 0) {
            redirectRandomly();
        }
    }






// Fun√ß√£o para remover a op√ß√£o de "Login Autom√°tico" do pop-up
function showFunctionSelector() {
    const content = `
    <div style="font-family: 'Inter', sans-serif; max-width: 90%; margin: 0 auto; padding: 15px; background-color: #1e1e1e; border-radius: 15px; box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.5); position: relative; color: #fff; transition: all 0.3s ease;">
        <header style="text-align: center; margin-bottom: 15px;">
            <h2 style="font-size: 20px; font-weight: bold; letter-spacing: 0.5px; background: linear-gradient(90deg, #ff8a00, #e52e71); -webkit-background-clip: text; color: transparent;">
                ‚öôÔ∏è Configura√ß√£o Personalizada
            </h2>
            <p style="font-size: 12px; color: #bbb; margin: 0;">Selecione e personalize as fun√ß√µes dispon√≠veis.</p>
        </header>
        <form id="function-form" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
            ${Object.keys(urls).filter(option => option !== "Login Autom√°tico").map(option => `
            <div style="background: #282828; padding: 10px; border-radius: 8px; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.3); transition: transform 0.3s, background 0.3s;">
                <label style="font-size: 14px; font-weight: bold; display: flex; align-items: center; gap: 8px; margin-bottom: 10px;">
                    <input type="checkbox" id="${option}" name="functions" value="${option}" ${activeFunctions.includes(option) ? 'checked' : ''} style="width: 16px; height: 16px; accent-color: #ff8a00; cursor: pointer;">
                    ${option}
                </label>
                <button type="button"
                    class="configure-button"
                    data-config-type="${option}"
                    style="align-self: stretch; padding: 6px 8px; background: linear-gradient(90deg, #6a5acd, #836fff); color: #fff; border: none; border-radius: 6px; font-size: 12px; font-weight: bold; cursor: pointer; text-align: center; box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.3);">
                    Configurar
                </button>
            </div>`).join('')}
        </form>
        <footer style="display: flex; justify-content: space-between; margin-top: 20px;">
            <button id="save-functions" style="flex: 1; padding: 10px; margin-right: 8px; background: linear-gradient(90deg, #4caf50, #81c784); color: #fff; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.4); transition: background 0.3s, transform 0.3s;">
                Salvar
            </button>
            <button id="close-popup" style="flex: 1; padding: 10px; margin-left: 8px; background: linear-gradient(90deg, #d32f2f, #ff5252); color: #fff; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; box-shadow: 0px 3px 10px rgba(0, 0, 0, 0.4); transition: background 0.3s, transform 0.3s;">
                Fechar
            </button>
        </footer>
    </div>`;


    createPopup(content);


    // Event handlers for all configure buttons
    document.querySelectorAll('.configure-button').forEach(button => {
        button.addEventListener('click', (event) => {
            const configType = event.target.getAttribute('data-config-type');
            if (configType === "Edif√≠cio Principal") {
                showMainConfig();
            } else if (configType === "Recrutamento") {
                showRecruitmentConfig();
            }
        });
    });




































    // Add hover animations
    document.querySelectorAll('div[style*="transition"]').forEach(card => {
        card.addEventListener('mouseover', () => {
            card.style.transform = 'scale(1.05)';
            card.style.background = '#383838';
        });
        card.addEventListener('mouseout', () => {
            card.style.transform = 'scale(1)';
            card.style.background = '#282828';
        });
    });


    document.querySelectorAll('button').forEach(button => {
        button.addEventListener('mouseover', () => {
            button.style.transform = 'translateY(-2px)';
        });
        button.addEventListener('mouseout', () => {
            button.style.transform = 'translateY(0)';
        });
    });
}



















// Fun√ß√£o para exibir o pop-up principal com os dois cards
function showSellPPPopup() {
    const content = `
    <div style="font-family: Arial, sans-serif; color: #333; max-width: 500px; padding: 20px; border-radius: 12px; background: white; box-shadow: 0 8px 16px rgba(0,0,0,0.2); text-align: center;">
        <h2 style="color: #3498db; margin-bottom: 20px;">üí∞ Configurar Venda por PPs</h2>

        <!-- Container dos Cards -->
        <div style="display: flex; gap: 15px; justify-content: center; margin-bottom: 20px;">

            <!-- Card Configura√ß√£o Manual -->
            <div class="sell-pp-card" style="flex: 1; padding: 15px; border: 1px solid #ddd; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); cursor: pointer; transition: transform 0.2s ease;" id="manualConfigCard">
                <h3 style="color: #2c3e50;">üõ†Ô∏è Configura√ß√£o Manual</h3>
                <p style="font-size: 14px; color: #555;">Defina valores fixos para venda de recursos de forma manual.</p>
            </div>

            <!-- Card Configura√ß√£o Inteligente -->
            <div class="sell-pp-card" style="flex: 1; padding: 15px; border: 1px solid #ddd; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); cursor: pointer; transition: transform 0.2s ease;" id="smartConfigCard">
                <h3 style="color: #2c3e50;">ü§ñ Configura√ß√£o Inteligente</h3>
                <p style="font-size: 14px; color: #555;">Venda autom√°tica de recursos otimizando pre√ßo e demanda.</p>
            </div>
        </div>

        <!-- Bot√£o de Fechar -->
        <button id="close-sell-pp-popup" style="margin-top: 20px; padding: 10px 20px; background: #e74c3c; border: none; color: white; border-radius: 8px; cursor: pointer;">
            Fechar
        </button>
    </div>
    `;

    createPopup(content);

    // Eventos para abrir os respectivos pop-ups
    document.getElementById('manualConfigCard').addEventListener('click', showManualConfig);
    document.getElementById('smartConfigCard').addEventListener('click', showSmartConfig);

    // Fechar o pop-up
    document.getElementById('close-sell-pp-popup').addEventListener('click', closePopup);
}

// Evento para exibir o pop-up ao clicar no bot√£o de "Configurar"
document.body.addEventListener('click', (event) => {
    if (event.target.getAttribute('data-config-type') === "Vender por pps") {
        showSellPPPopup();
    }
});

// Fun√ß√£o para exibir o pop-up de configura√ß√£o manual
function showManualConfig() {
    const content = `
    <div style="font-family: Arial, sans-serif; color: #333; max-width: 400px; padding: 20px; border-radius: 12px; background: white; box-shadow: 0 8px 16px rgba(0,0,0,0.2); text-align: center;">
        <h2 style="color: #f39c12;">üõ†Ô∏è Configura√ß√£o Manual</h2>
        <label>üí∞ Pre√ßo M√≠nimo (PP):
            <input type="number" id="manualMinPrice" value="50" style="width: 100%; padding: 8px;">
        </label>
        <label>üì¶ Quantidade de Recursos:
            <input type="number" id="manualResourceAmount" value="1000" style="width: 100%; padding: 8px;">
        </label>
        <button onclick="saveManualConfig()" style="margin-top: 20px; padding: 10px 20px; background: #27ae60; color: white; border: none; border-radius: 8px; cursor: pointer;">Salvar</button>
        <button onclick="showSellPPPopup()" style="margin-top: 10px; padding: 10px 20px; background: #e74c3c; color: white; border: none; border-radius: 8px; cursor: pointer;">Voltar</button>
    </div>
    `;
    createPopup(content);
}

// Fun√ß√£o para exibir o pop-up de configura√ß√£o inteligente
function showSmartConfig() {
    const content = `
    <div style="font-family: Arial, sans-serif; color: #333; max-width: 400px; padding: 20px; border-radius: 12px; background: white; box-shadow: 0 8px 16px rgba(0,0,0,0.2); text-align: center;">
        <h2 style="color: #8e44ad;">ü§ñ Configura√ß√£o Inteligente</h2>
        <p>Este modo ajusta automaticamente os pre√ßos baseando-se na demanda do mercado.</p>
        <label>Ativar Venda Autom√°tica:
            <input type="checkbox" id="enableSmartSell">
        </label>
        <button onclick="saveSmartConfig()" style="margin-top: 20px; padding: 10px 20px; background: #27ae60; color: white; border: none; border-radius: 8px; cursor: pointer;">Salvar</button>
        <button onclick="showSellPPPopup()" style="margin-top: 10px; padding: 10px 20px; background: #e74c3c; color: white; border: none; border-radius: 8px; cursor: pointer;">Voltar</button>
    </div>
    `;
    createPopup(content);
}

// Fun√ß√£o para salvar a configura√ß√£o manual
function saveManualConfig() {
    const minPrice = parseInt(document.getElementById('manualMinPrice').value) || 0;
    const resourceAmount = parseInt(document.getElementById('manualResourceAmount').value) || 0;

    recruitmentConfig.sellPP = {
        minPrice,
        resourceAmount
    };

    saveRecruitmentConfig();
    alert('‚úÖ Configura√ß√£o Manual salva com sucesso!');
    closePopup();
}

// Fun√ß√£o para salvar a configura√ß√£o inteligente
function saveSmartConfig() {
    const enableSmartSell = document.getElementById('enableSmartSell').checked;
    recruitmentConfig.sellPP.smartSellEnabled = enableSmartSell;

    saveRecruitmentConfig();
    alert('‚úÖ Configura√ß√£o Inteligente salva com sucesso!');
    closePopup();
}












































// Fun√ß√£o para exibir o pop-up de configura√ß√£o de recrutamento
function showRecruitmentConfig() {
    const content = `
    <div style="font-family: Arial, sans-serif; color: #333; max-width: 450px; margin: 0 auto; padding: 10px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); max-height: 85vh; overflow-y: auto;">
        <h2 style="margin-top: 0; color: #007bff; font-size: 18px; text-align: center; border-bottom: 2px solid #ddd; padding-bottom: 5px;">üéØ Configura√ß√£o de Recrutamento</h2>
        <div id="success-message" style="display: none; text-align: center; margin-bottom: 10px; padding: 5px; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; border-radius: 5px; font-size: 14px;">
            Configura√ß√µes salvas com sucesso!
        </div>
        <form id="recruitment-form" style="margin-top: 10px;">
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 8px;">
                ${createRecruitmentRows([
                    { id: 'spear', name: 'Lanceiros', icon: '‚öúÔ∏è' },
                    { id: 'sword', name: 'Espadachins', icon: '‚öîÔ∏è' },
                    { id: 'axe', name: 'Machados', icon: 'ü™ì' },
                    { id: 'archer', name: 'Arqueiros', icon: 'üèπ' },
                    { id: 'scout', name: 'Explorador', icon: 'üïµÔ∏è' },
                    { id: 'light', name: 'Cavalaria Leve', icon: 'üêé' },
                    { id: 'marcher', name: 'Arqueiros a Cavalo', icon: 'üèá' },
                    { id: 'heavy', name: 'Cavalaria Pesada', icon: 'üê¥' },
                    { id: 'ram', name: 'Arietes', icon: 'üêè' },
                    { id: 'catapult', name: 'Catapultas', icon: 'üéØ' }
                ])}
            </div>


            <div style="display: flex; justify-content: center; gap: 10px; margin-top: 15px;">
                <button id="save-recruitment-config" style="padding: 6px 12px; background-color: #28a745; color: white; border: none; border-radius: 5px; font-size: 12px; cursor: pointer;">
                    Salvar
                </button>
                <button id="close-popup" style="padding: 6px 12px; background-color: #dc3545; color: white; border: none; border-radius: 5px; font-size: 12px; cursor: pointer;">
                    Fechar
                </button>
            </div>
        </form>
    </div>`;
    createPopup(content);


    // Adicionar evento de salvar as configura√ß√µes
    document.getElementById('save-recruitment-config').addEventListener('click', saveRecruitmentSettings);


    // Adicionar evento para fechar o pop-up
    document.getElementById('close-popup').addEventListener('click', closePopup);
}






















































/**
 * Retorna o nome traduzido de um edif√≠cio com base no ID do edif√≠cio e no idioma do navegador.
 *
 * @param {string} buildingId - O identificador √∫nico do edif√≠cio (exemplo: "Main", "Barracks").
 * @returns {string} - O nome do edif√≠cio no idioma do navegador, ou no idioma padr√£o (ingl√™s),
 * caso a tradu√ß√£o no idioma do navegador n√£o esteja dispon√≠vel.
 */


function getBuildingName(buildingId) {
    const translations = {
        Main: { en: "Main Building", pt: "Edif√≠cio Principal" },
        Statue: { en: "Statue", pt: "Est√°tua" },
        Wood: { en: "Woodcutter", pt: "Bosque" },
        Clay: { en: "Clay Pit", pt: "Po√ßo de Argila" },
        Iron: { en: "Iron Mine", pt: "Mina de Ferro" },
        Farm: { en: "Farm", pt: "Fazenda" },
        Storage: { en: "Storage", pt: "Armaz√©m" },
        Hide: { en: "Hideout", pt: "Esconderijo" },
        Barracks: { en: "Barracks", pt: "Quartel" },
        Stable: { en: "Stable", pt: "Est√°bulo" },
        Workshop: { en: "Workshop", pt: "Oficina" },
        Watchtower: { en: "Watchtower", pt: "Torre de Vigia" },
        Academy: { en: "Academy", pt: "Academia" },
        Smith: { en: "Smithy", pt: "Ferreiro" },
        Market: { en: "Market", pt: "Mercado" },
        Wall: { en: "Wall", pt: "Muralha" },
        ConstructionOrders: { en: "Construction Orders", pt: "Ordens de Constru√ß√£o" }
    };


    const lang = navigator.language.slice(0, 2); // Obt√©m o idioma do navegador (ex: "pt" ou "en")
    return translations[buildingId]?.[lang] || translations[buildingId]?.en || buildingId;
}


/**
 * Exibe um popup centralizado na tela com configura√ß√µes para ajustar os n√≠veis dos edif√≠cios no jogo.
 * O popup inclui um formul√°rio din√¢mico, gerado pela fun√ß√£o `generateBuildingCards`, onde o usu√°rio
 * pode definir os n√≠veis desejados para cada edif√≠cio, al√©m de dois bot√µes para salvar ou fechar o popup.
 */


function showMainConfig() {
    const content = `
    <div style="font-family: Arial, sans-serif; width: 600px; margin: auto; padding: 10px; background: #ffffff; border: 1px solid #ccc; border-radius: 8px; box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1); position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <h2 style="margin-top: 0; color: #2c3e50; font-size: 18px; text-align: center; border-bottom: 2px solid #3498db; padding-bottom: 5px;">
            üèóÔ∏è Configura√ß√£o de Constru√ß√£o Inteligente
        </h2>
        <p style="text-align: center; font-size: 12px; color: #34495e; margin: 0 0 10px;">
            Configure os n√≠veis desejados para cada edif√≠cio de forma r√°pida e automatize a fila!
        </p>
        <form id="building-config-form" style="display: grid; grid-template-columns: repeat(6, 1fr); gap: 6px;">
            ${generateBuildingCards()}
        </form>
        <div style="text-align: center; margin-top: 10px;">
            <button id="save-building-config" style="padding: 8px 16px; background: #2ecc71; color: white; border: none; border-radius: 5px; font-size: 14px; cursor: pointer; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);">
                Salvar Configura√ß√µes
            </button>
            <button id="close-popup" style="padding: 8px 16px; background: #e74c3c; color: white; border: none; border-radius: 5px; font-size: 14px; cursor: pointer; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); margin-left: 8px;">
                Fechar
            </button>
        </div>
    </div>`;
    createPopup(content);


    // Evento para salvar as configura√ß√µes
    document.getElementById('save-building-config').addEventListener('click', saveBuildingConfig);


    // Evento para fechar o pop-up
    document.getElementById('close-popup').addEventListener('click', closePopup);
}






// Gera os cards para cada edif√≠cio, incluindo o novo card "Adicionar Ordem por Texto"
function generateBuildingCards() {
    const buildings = [
        { name: "Ordens de Constru√ß√£o", id: "constructionOrders", icon: "üìú" },
        { name: "Ordem por Texto", id: "addOrderByText", icon: "üìì" },
        { name: "Configurar Execu√ß√£o", id: "executionConfig", icon: "‚öôÔ∏è" }, // Novo card
    ];


    return buildings.map(building => `
        <div style="border: 1px solid #bdc3c7; border-radius: 5px; padding: 5px; background: white; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); display: flex; flex-direction: column; align-items: center; text-align: center; font-size: 10px;">
            <div style="font-size: 18px; margin-bottom: 4px;">${building.icon}</div>
            <h4 style="color: #34495e; font-size: 12px; margin-bottom: 4px;">${building.name}</h4>
            ${building.id === "constructionOrders" ? `
            <button id="btn-construction-orders" style="padding: 4px 10px; background: #3498db; color: white; border: none; border-radius: 5px; font-size: 10px; cursor: pointer; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);">
                Ver Configura√ß√µes
            </button>
            ` : building.id === "addOrderByText" ? `
            <button id="btn-add-order-by-text" style="padding: 4px 10px; background: #3498db; color: white; border: none; border-radius: 5px; font-size: 10px; cursor: pointer; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);">
                Adicionar por Texto
            </button>
            ` : building.id === "executionConfig" ? `
            <button id="btn-execution-config" style="padding: 4px 10px; background: #3498db; color: white; border: none; border-radius: 5px; font-size: 10px; cursor: pointer; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);">
                Configurar Execu√ß√£o
            </button>
            ` : ''}
        </div>
    `).join('');
}




// Manter os eventos existentes para "Ver Configura√ß√µes"
document.body.addEventListener('click', (event) => {
    if (event.target.id === 'btn-construction-orders') {
        openConstructionOrdersPopup();
    }
});


// Evento para abrir o popup para adicionar ordem por texto
document.body.addEventListener('click', (event) => {
    if (event.target.id === 'btn-add-order-by-text') {
        openAddOrderByTextPopup();
    }
});
































function openExecutionConfigPopup() {
    // Carrega as configura√ß√µes existentes ou usa valores padr√£o
    const currentConfig = recruitmentConfig.execution || {
        mode: "followOrder",
        advancedResourceManagement: false,
        optimizeTime: false,
        premiumBudget: 0,
        usePremiumForResources: false,
        activateRewards: false, // Nova configura√ß√£o padr√£o
    };


    const content = `
    <div style="font-family: 'Arial', sans-serif; width: 600px; background: #f4f4f4; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: #333;">
        <header style="background: #3498db; padding: 16px; text-align: center; font-size: 18px; font-weight: bold; color: white; border-bottom: 1px solid #2980b9;">
            ‚öôÔ∏è Configura√ß√µes Avan√ßadas de Execu√ß√£o
        </header>
        <div style="padding: 20px; display: flex; flex-direction: column; gap: 16px; max-height: 80vh; overflow-y: auto;">
            <!-- Modo de Constru√ß√£o -->
            <section style="padding: 10px; border: 1px solid #ccc; border-radius: 8px; background: white;">
                <h3 style="font-size: 14px; margin-bottom: 10px;">üîß Modo de Constru√ß√£o</h3>
                <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px; font-size: 14px;">
                    <input type="radio" name="build-mode" value="followOrder" ${currentConfig.mode === "followOrder" ? "checked" : ""}>
                    Seguir a Ordem
                </label>
                <label style="display: flex; align-items: center; gap: 10px; font-size: 14px;">
                    <input type="radio" name="build-mode" value="opportunistic" ${currentConfig.mode === "opportunistic" ? "checked" : ""}>
                    Constru√ß√£o Oportuna
                </label>
            </section>


            <!-- Otimiza√ß√£o de Tempo -->
            <section style="padding: 10px; border: 1px solid #ccc; border-radius: 8px; background: white;">
                <h3 style="font-size: 14px; margin-bottom: 10px;">‚è±Ô∏è Otimiza√ß√£o de Tempo</h3>
                <label style="display: flex; align-items: center; gap: 10px; font-size: 14px;">
                    <input type="checkbox" id="optimize-time" ${currentConfig.optimizeTime ? "checked" : ""}>
                    Reduzir automaticamente o tempo cr√≠tico de constru√ß√£o
                </label>
            </section>


            <!-- Controle de Pontos Premium -->
            <section style="padding: 10px; border: 1px solid #ccc; border-radius: 8px; background: white;">
                <h3 style="font-size: 14px; margin-bottom: 10px;">üíé Reduzir Custos de Recursos</h3>
                <label style="display: flex; align-items: center; gap: 10px; font-size: 14px;">
                    <input type="checkbox" id="use-premium-for-resources" ${currentConfig.usePremiumForResources ? "checked" : ""}>
                    Usar Pontos Premium para reduzir custos de recursos
                </label>
                <label style="display: flex; flex-direction: column; gap: 5px; font-size: 14px; margin-top: 10px;">
                    <span>Or√ßamento M√°ximo de Pontos Premium:</span>
                    <input type="number" id="premium-budget" min="0" value="${currentConfig.premiumBudget}" style="padding: 5px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; width: 100%;">
                </label>
            </section>


            <!-- Gest√£o Avan√ßada de Recursos -->
            <section style="padding: 10px; border: 1px solid #ccc; border-radius: 8px; background: white;">
                <h3 style="font-size: 14px; margin-bottom: 10px;">üìä Gest√£o de Recursos</h3>
                <label style="display: flex; align-items: center; gap: 10px; font-size: 14px;">
                    <input type="checkbox" id="advanced-resource-management" ${currentConfig.advancedResourceManagement ? "checked" : ""}>
                    Monitorar recursos e fazer constru√ß√µes otimizadas
                </label>
            </section>


            <!-- Ativar Recompensas -->
            <section style="padding: 10px; border: 1px solid #ccc; border-radius: 8px; background: white;">
                <h3 style="font-size: 14px; margin-bottom: 10px;">üèÜ Recompensas</h3>
                <label style="display: flex; align-items: center; gap: 10px; font-size: 14px;">
                    <input type="checkbox" id="activate-rewards" ${currentConfig.activateRewards ? "checked" : ""}>
                    Ativar Recompensas Autom√°ticas
                </label>
            </section>
        </div>
        <footer style="background: #ecf0f1; padding: 16px; text-align: center; border-top: 1px solid #ccc;">
            <button id="save-execution-config" style="padding: 10px 20px; background: #27ae60; color: white; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">
                Salvar Configura√ß√µes
            </button>
            <button id="close-popup-execution" style="padding: 10px 20px; background: #e74c3c; color: white; border: none; border-radius: 6px; font-size: 14px; margin-left: 10px; cursor: pointer;">
                Fechar
            </button>
        </footer>
    </div>`;


    createPopup(content);


    // Eventos para salvar e fechar
    document.getElementById('save-execution-config').addEventListener('click', saveExecutionConfig);
    document.getElementById('close-popup-execution').addEventListener('click', closePopup);
}




 function saveExecutionConfig() {
    const mode = document.querySelector('input[name="build-mode"]:checked').value;
    const optimizeTime = document.getElementById('optimize-time').checked;
    const usePremiumForResources = document.getElementById('use-premium-for-resources').checked;
    const premiumBudget = parseInt(document.getElementById('premium-budget').value, 10) || 0;
    const advancedResourceManagement = document.getElementById('advanced-resource-management').checked;
    const activateRewards = document.getElementById('activate-rewards').checked;


    recruitmentConfig.execution = {
        mode,
        optimizeTime,
        usePremiumForResources,
        premiumBudget,
        advancedResourceManagement,
        activateRewards // Salva o estado do novo checkbox
    };


    localStorage.setItem('recruitmentConfig', JSON.stringify(recruitmentConfig));
    alert("Configura√ß√µes salvas com sucesso!");
    closePopup();
}


















































// C√≥digo do popup para "Adicionar Ordem por Texto" permanece o mesmo
function openAddOrderByTextPopup() {
    const content = `
    <div style="font-family: 'Arial', sans-serif; width: 600px; background: #f4f4f4; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); overflow: hidden;">
        <header style="background: linear-gradient(135deg, #6a11cb, #2575fc); color: white; padding: 16px; text-align: center; font-size: 18px; font-weight: bold; letter-spacing: 1px;">
            üìì Adicionar Ordem por Texto
        </header>
        <div style="padding: 20px; display: flex; flex-direction: column; gap: 16px;">
            <!-- Texto de explica√ß√£o -->
            <p style="margin: 0; font-size: 14px; color: #555; text-align: center;">
                Escolha um <strong>perfil estrat√©gico</strong> abaixo para preencher automaticamente ou personalize suas ordens de constru√ß√£o.
            </p>


            <!-- Op√ß√µes de perfis -->
            <div style="display: flex; justify-content: space-between; gap: 10px;">
                ${createProfileCard('sprinter', 'Sprinter', 'üèÉ', 'Foco em velocidade e crescimento r√°pido.')}
                ${createProfileCard('attack', 'Ataque', '‚öîÔ∏è', 'Ideal para estrat√©gias agressivas.')}
                ${createProfileCard('defense', 'Defesa', 'üõ°Ô∏è', 'Fortale√ßa sua vila contra invasores.')}
                ${createProfileCard('resources', 'Recursos', 'üí∞', 'Aumente sua produ√ß√£o e capacidade.')}
            </div>


            <!-- Caixa de texto para ordens -->
          <textarea id="order-textarea"
    placeholder="Digite ou selecione um perfil acima para preencher automaticamente. Exemplo:\nMain,10\nBarracks,5"
    style="
        display: block;
        width: calc(100% - 20px); /* Reduzido um pouco menos para alinhar perfeitamente com os cards */
        height: 120px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 14px;
        color: #333;
        background: #fff;
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
        resize: none;
        margin: 0 auto;
    ">
</textarea>



            <!-- Bot√µes de a√ß√£o -->
            <div style="display: flex; justify-content: space-between; gap: 10px;">
                <button id="save-order-text" style="flex: 1; padding: 10px; background: #28a745; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
                    Salvar
                </button>
                <button id="close-popup-text" style="flex: 1; padding: 10px; background: #e74c3c; color: white; border: none; border-radius: 8px; font-size: 14px; font-weight: bold; cursor: pointer; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
                    Fechar
                </button>
            </div>
        </div>
    </div>`;
    createPopup(content);


    // Eventos de clique para os perfis
    const cards = document.querySelectorAll('.profile-card');
    cards.forEach(card => {
        card.addEventListener('click', () => {
            const profile = card.getAttribute('data-profile');
            const textarea = document.getElementById('order-textarea');
            textarea.value = getPresetOrder(profile);


            // Destacar o card selecionado
            cards.forEach(c => c.classList.remove('selected-card'));
            card.classList.add('selected-card');
        });
    });


    // Eventos para os bot√µes
    document.getElementById('save-order-text').addEventListener('click', saveOrderByText);
    document.getElementById('close-popup-text').addEventListener('click', closePopup);
}


// Fun√ß√£o para criar um card de perfil
function createProfileCard(profile, title, icon, description) {
    return `
    <div class="profile-card" data-profile="${profile}" style="flex: 1; padding: 12px; background: white; border: 2px solid #ddd; border-radius: 8px; text-align: center; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
        <div style="font-size: 24px; margin-bottom: 8px;">${icon}</div>
        <h3 style="font-size: 16px; margin: 0; color: #333;">${title}</h3>
        <p style="font-size: 12px; color: #555; margin-top: 4px;">${description}</p>
    </div>`;
}


// Estilo para card selecionado
const style = document.createElement('style');
style.textContent = `
    .profile-card:hover {
        background: #f7f7f7;
        border-color: #3498db;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
    .profile-card.selected-card {
        background: #3498db;
        color: white;
        border-color: #2980b9;
    }
`;
document.head.appendChild(style);


// Retorna ordens pr√©-definidas com base no perfil escolhido
// Retorna ordens pr√©-definidas com base no perfil escolhido
function getPresetOrder(profile) {
    const orders = {
        sprinter: `Main 1
Statue 1
Storage 1
Pedra 1
Bosque 1
Mina de ferro 1
Fazenda 1
Main 2
Storage 2
Bosque 2
Pedra 2
Mina de ferro 2
Bosque 3
Pedra 3
Main 3
Fazenda 2
Bosque 4
Pedra 4
Storage 3
Mina de ferro 3
Main 4
Quartel 1
Bosque 5
Pedra 5
Mina de ferro 4
Storage 4
Main 5
Fazenda 3
Bosque 6
Pedra 6
Mina de ferro 5
Storage 5
Quartel 2
Bosque 7
Pedra 7
Main 6
Bosque 8
Fazenda 4
Pedra 8
Mina de ferro 6
Storage 6
Quartel 3
Bosque 9
Main 7
Pedra 9
Fazenda 5
Mina de ferro 7
Storage 7
Main 8
Bosque 10
Pedra 10
Mina de ferro 8
Storage 8
Quartel 4
Fazenda 6
Main 9
Bosque 11
Pedra 11
Mina de ferro 9
Storage 9
Quartel 5
Fazenda 7
Main 10
Bosque 12
Pedra 12
Mina de ferro 10
Storage 10
Quartel 6
Fazenda 8
Bosque 13
Main 11
Pedra 13
Mina de ferro 11
Storage 11
Ferreiro 1
Bosque 14
Quartel 7
Pedra 14
Mina de ferro 12
Storage 12
Main 12
Fazenda 9
Bosque 15
Pedra 15
Mina de ferro 13
Storage 13
Ferreiro 2
Bosque 16
Main 13
Pedra 16
Mina de ferro 14
Storage 14
Quartel 8
Bosque 17
Fazenda 10
Pedra 17
Mina de ferro 15
Storage 15
Main 14
Bosque 18
Pedra 18
Mina de ferro 16
Storage 16
Ferreiro 3
Bosque 19
Main 15
Pedra 19
Mina de ferro 17
Storage 17
Fazenda 11
Bosque 20
Pedra 20
Mina de ferro 18
Storage 18
Quartel 9
Bosque 21
Main 16
Pedra 21
Mina de ferro 19
Storage 19
Fazenda 12
Bosque 22
Pedra 22
Mina de ferro 20
Storage 20
Quartel 10
Main 17
Bosque 23
Pedra 23
Mina de ferro 21
Storage 21
Fazenda 13
Bosque 24
Pedra 24
Mina de ferro 22
Storage 22
Ferreiro 5
Main 18
Bosque 25
Pedra 25
Mina de ferro 23
Storage 23
Fazenda 14
Bosque 26
Pedra 26
Mina de ferro 24
Storage 24
Main 19
Bosque 27
Pedra 27
Mina de ferro 25
Storage 25
Fazenda 15
Bosque 28
Pedra 28
Mina de ferro 26
Storage 26
Main 20
Bosque 29
Pedra 29
Mina de ferro 27
Storage 27
Fazenda 16
Bosque 30
Pedra 30
Mina de ferro 28
Storage 28
Academia 1
Quartel 15
Ferreiro 10
Oficina 5
Quartel 20
Storage 30
Fazenda 30`
,
       attack: `Main 1
Statue 1
Pedra 1
Bosque 1
Mina de ferro 1
Pedra 2
Bosque 2
Pedra 3
Bosque 3
Fazenda 1
Pedra 4
Mina de ferro 2
Fazenda 2
Bosque 4
Pedra 5
Main 2
Main 3
Main 4
Main 5
Quartel 1
Quartel 2
Storage 1
Quartel 3
Storage 2
Fazenda 3
Bosque 5
Pedra 6
Mina de ferro 3
Fazenda 4
Storage 3
Storage 4
Fazenda 5
Ferreiro 1
Ferreiro 2
Ferreiro 3
Main 6
Storage 5
Storage 6
Mina de ferro 4
Mina de ferro 5
Fazenda 6
Main 7
Bosque 6
Bosque 7
Bosque 8
Bosque 9
Bosque 10
Pedra 7
Pedra 8
Pedra 9
Pedra 10
Fazenda 7
Mercado 1
Mercado 2
Main 8
Quartel 4
Fazenda 8
Main 9
Quartel 5
Muralha 1
Muralha 2
Muralha 3
Muralha 4
Muralha 5
Mina de ferro 6
Ferreiro 4
Fazenda 9
Ferreiro 5
Fazenda 10
Main 10
Stable 1
Fazenda 11
Stable 2
Stable 3
Mina de ferro 7
Stable 4
Stable 5
Fazenda 12
Bosque 11
Bosque 12
Bosque 13
Bosque 14
Bosque 15
Pedra 11
Pedra 12
Pedra 13
Pedra 14
Pedra 15
Mina de ferro 8
Mina de ferro 9
Mina de ferro 10
Ferreiro 6
Ferreiro 7
Ferreiro 8
Ferreiro 9
Ferreiro 10
Oficina 1
Oficina 2
Oficina 3
Mina de ferro 11
Mina de ferro 12
Mina de ferro 13
Mina de ferro 14
Mina de ferro 15
Main 11
Main 12
Main 13
Main 14
Main 15
Fazenda 13
Fazenda 14
Muralha 6
Muralha 7
Muralha 8
Muralha 9
Muralha 10
Quartel 6
Quartel 7
Quartel 8
Quartel 9
Quartel 10
Bosque 16
Pedra 16
Bosque 17
Pedra 17
Fazenda 15
Bosque 18
Pedra 18
Bosque 19
Pedra 19
Bosque 20
Pedra 20
Main 16
Main 17
Main 18
Main 19
Main 20
Bosque 21
Pedra 21
Bosque 22
Pedra 22
Fazenda 16
Quartel 11
Quartel 12
Quartel 13
Quartel 14
Quartel 15
Stable 6
Stable 7
Stable 8
Stable 9
Stable 10
Stable 11
Stable 12
Stable 13
Stable 14
Stable 15
Ferreiro 11
Ferreiro 12
Ferreiro 13
Ferreiro 14
Ferreiro 15
Mina de ferro 16
Mina de ferro 17
Mina de ferro 18
Mina de ferro 19
Mina de ferro 20
Fazenda 17
Mercado 3
Mercado 4
Mercado 5
Mercado 6
Mercado 7
Mercado 8
Mercado 9
Mercado 10
Quartel 16
Quartel 17
Quartel 18
Quartel 19
Quartel 20
Bosque 23
Pedra 23
Fazenda 18
Bosque 24
Pedra 24
Mercado 11
Mercado 12
Mercado 13
Mercado 14
Mercado 15
Ferreiro 16
Ferreiro 17
Ferreiro 18
Ferreiro 19
Ferreiro 20
Academia 1
Bosque 25
Pedra 25
Mina de ferro 21
Mina de ferro 22
Mina de ferro 23
Mina de ferro 24
Mina de ferro 25
Bosque 26
Pedra 26
Mina de ferro 26
Bosque 27
Pedra 27
Bosque 28
Pedra 28
Bosque 29
Pedra 29
Bosque 30
Pedra 30
Fazenda 19
Fazenda 20
Fazenda 21
Fazenda 22
Fazenda 23
Fazenda 24
Fazenda 25
Fazenda 26
Fazenda 27
Fazenda 28
Fazenda 29
Fazenda 30
Storage 7
Storage 8
Storage 9
Storage 10
Storage 11
Storage 12
Storage 13
Storage 14
Storage 15
Storage 16
Storage 17
Storage 18
Storage 19
Storage 20
Storage 21
Storage 22
Storage 23
Storage 24
Storage 25
Storage 26
Storage 27
Storage 28
Storage 29
Storage 30`
,
        defense: `Main 1
Statue 1
Pedra 1
Bosque 1
Mina de ferro 1
Pedra 2
Bosque 2
Pedra 3
Bosque 3
Mina de ferro 2
Bosque 4
Pedra 4
Storage 1
Bosque 5
Pedra 5
Bosque 6
Mina de ferro 3
Pedra 6
Storage 2
Main 3
Quartel 1
Storage 3
Quartel 2
Bosque 7
Mercado 1
Storage 4
Bosque 9
Pedra 7
Bosque 10
Pedra 8
Bosque 11
Storage 5
Fazenda 2
Pedra 9
Mina de ferro 4
Bosque 12
Pedra 10
Storage 6
Fazenda 3
Quartel 5
Muralha 5
Bosque 13
Storage 7
Pedra 11
Mina de ferro 6
Fazenda 4
Main 5
Ferreiro 2
Bosque 14
Pedra 12
Fazenda 5
Storage 9
Bosque 15
Mina de ferro 10
Pedra 13
Storage 10
Main 10
Fazenda 8
Storage 11
Bosque 16
Pedra 15
Mina de ferro 14
Quartel 12
Ferreiro 5
Stable 3
Muralha 10
Mercado 5
Fazenda 11
Storage 12
Pedra 16
Bosque 17
Mina de ferro 15
Ferreiro 8
Mercado 6
Ferreiro 10
Quartel 13
Bosque 18
Pedra 17
Storage 16
Fazenda 16
Quartel 14
Muralha 15
Pedra 18
Main 15
Bosque 19
Oficina 3
Stable 5
Pedra 19
Main 20
Stable 10
Stable 15
Ferreiro 15
Muralha 20
Fazenda 18
Storage 17
Bosque 20
Pedra 22
Bosque 21
Mina de ferro 18
Fazenda 21
Storage 19
Bosque 22
Mercado 10
Quartel 18
Pedra 24
Quartel 19
Storage 22
Fazenda 22
Pedra 25
Fazenda 23
Quartel 20
Quartel 23
Bosque 24
Mina de ferro 21
Quartel 24
Ferreiro 20
Quartel 25
Stable 20
Bosque 25
Mina de ferro 25
Pedra 26
Fazenda 25
Mercado 15
Mina de ferro 26
Storage 25
Academia 1
Bosque 26
Bosque 27
Pedra 27
Bosque 28
Pedra 28
Storage 27
Fazenda 27
Pedra 29
Bosque 29
Mina de ferro 27
Fazenda 28
Mina de ferro 28
Storage 28
Storage 29
Pedra 30
Bosque 30
Mina de ferro 30
Fazenda 30`
,
       resources: `Main 1
Statue 1
Pedra 1
Bosque 1
Mina de ferro 1
Pedra 2
Bosque 2
Mina de ferro 2
Storage 1
Pedra 3
Bosque 3
Mina de ferro 3
Fazenda 1
Pedra 4
Bosque 4
Mina de ferro 4
Storage 2
Main 2
Main 3
Main 4
Bosque 5
Pedra 5
Mina de ferro 5
Storage 3
Storage 4
Fazenda 2
Bosque 6
Pedra 6
Mina de ferro 6
Storage 5
Fazenda 3
Main 5
Mercado 1
Mercado 2
Bosque 7
Pedra 7
Mina de ferro 7
Storage 6
Fazenda 4
Main 6
Bosque 8
Pedra 8
Mina de ferro 8
Storage 7
Bosque 9
Pedra 9
Mina de ferro 9
Fazenda 5
Main 7
Bosque 10
Pedra 10
Mina de ferro 10
Storage 8
Main 8
Mercado 3
Mercado 4
Bosque 11
Pedra 11
Mina de ferro 11
Storage 9
Fazenda 6
Main 9
Bosque 12
Pedra 12
Mina de ferro 12
Storage 10
Main 10
Fazenda 7
Bosque 13
Pedra 13
Mina de ferro 13
Storage 11
Bosque 14
Pedra 14
Mina de ferro 14
Storage 12
Main 11
Fazenda 8
Bosque 15
Pedra 15
Mina de ferro 15
Storage 13
Main 12
Bosque 16
Pedra 16
Mina de ferro 16
Storage 14
Bosque 17
Pedra 17
Mina de ferro 17
Fazenda 9
Storage 15
Main 13
Bosque 18
Pedra 18
Mina de ferro 18
Storage 16
Main 14
Bosque 19
Pedra 19
Mina de ferro 19
Storage 17
Fazenda 10
Bosque 20
Pedra 20
Mina de ferro 20
Storage 18
Main 15
Bosque 21
Pedra 21
Mina de ferro 21
Storage 19
Bosque 22
Pedra 22
Mina de ferro 22
Storage 20
Main 16
Fazenda 11
Bosque 23
Pedra 23
Mina de ferro 23
Storage 21
Bosque 24
Pedra 24
Mina de ferro 24
Storage 22
Main 17
Fazenda 12
Bosque 25
Pedra 25
Mina de ferro 25
Storage 23
Main 18
Fazenda 13
Bosque 26
Pedra 26
Mina de ferro 26
Storage 24
Bosque 27
Pedra 27
Mina de ferro 27
Storage 25
Main 19
Bosque 28
Pedra 28
Mina de ferro 28
Storage 26
Fazenda 14
Bosque 29
Pedra 29
Mina de ferro 29
Storage 27
Main 20
Bosque 30
Pedra 30
Mina de ferro 30
Storage 28
Fazenda 15
Storage 29
Fazenda 16
Storage 30
Fazenda 17
Fazenda 18
Fazenda 19
Fazenda 20
Fazenda 21
Fazenda 22
Fazenda 23
Fazenda 24
Fazenda 25
Fazenda 26
Fazenda 27
Fazenda 28
Fazenda 29
Fazenda 30`

    };


    return orders[profile] || ''; // Retorna as ordens ou vazio caso n√£o encontre
}


















































// Salva ordens inseridas por texto
function saveOrderByText() {
    const textarea = document.getElementById('order-textarea');
    const lines = textarea.value.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    const orders = [];


    for (const line of lines) {
        // Captura pares "nome n√∫mero" em cada linha (exemplo: "Main 10")
        const matches = line.match(/([a-zA-Z\s]+)\s+(\d+)/g);
        if (!matches) {
            alert(`Linha inv√°lida: "${line}". Use o formato Edif√≠cio N√≠vel (exemplo: "Main 10").`);
            return;
        }


        for (const match of matches) {
            const [_, buildingName, level] = match.match(/([a-zA-Z\s]+)\s+(\d+)/); // Separa nome e n√≠vel
            const buildingId = getBuildingIdFromName(buildingName.trim());


            if (buildingId && !isNaN(level)) {
                orders.push({ id: buildingId, level: parseInt(level, 10) });
            } else {
                alert(`Nome de edif√≠cio inv√°lido ou n√≠vel n√£o num√©rico: "${buildingName}".`);
                return;
            }
        }
    }


    // Atualiza a configura√ß√£o global
    recruitmentConfig.order = orders;


    // Salva no localStorage ou sistema de persist√™ncia
    saveRecruitmentConfig();


    alert('Ordens adicionadas com sucesso!');
    closePopup();
}


// Fun√ß√£o para mapear nomes para IDs
function getBuildingIdFromName(name) {
    name = name.trim().toLowerCase();
    const buildingNames = {
        main: ["main", "main building", "edif√≠cio principal"],
        statue: ["statue", "est√°tua"],
        wood: ["wood", "woodcutter", "bosque"],
        clay: ["clay", "clay pit", "po√ßo de argila", "argila", "barro", "stone", "pedra"], // Corre√ß√£o: inclui "stone" e "pedra"
        iron: ["iron", "iron mine", "mina de ferro", "ferro"],
        farm: ["farm", "fazenda"],
        storage: ["storage", "armaz√©m"],
        hide: ["hide", "hideout", "esconderijo"],
        barracks: ["barracks", "quartel"],
        stable: ["stable", "est√°bulo"],
        workshop: ["workshop", "oficina"],
        watchtower: ["watchtower", "torre de vigia"],
        academy: ["academy", "academia"],
        smith: ["smith", "smithy", "ferreiro"],
        market: ["market", "mercado"],
        wall: ["wall", "muralha"]
    };

    for (const [id, names] of Object.entries(buildingNames)) {
        if (names.some(n => n.toLowerCase() === name)) {
            console.log(`Nome de entrada: ${name}, ID retornado: ${id}`);
            return id;
        }
    }
    console.log(`Nome de entrada: ${name}, ID retornado: null`);
    return null;
}


// Exemplo de fun√ß√£o de persist√™ncia (ajuste conforme necess√°rio)
function saveRecruitmentConfig() {
    localStorage.setItem('recruitmentConfig', JSON.stringify(recruitmentConfig));
}





























// Fun√ß√£o para abrir o popup de configura√ß√µes de constru√ß√£o
function openConstructionOrdersPopup() {
    const savedOrder = recruitmentConfig.order || [];

    // Mapear os √≠cones por ID dos edif√≠cios
    const buildingIcons = {
        main: "üèõÔ∏è",
        statue: "üóø",
        wood: "üå≤",
        clay: "üè∫",
        iron: "‚õìÔ∏è",
        farm: "üåæ",
        storage: "üì¶",
        hide: "üèöÔ∏è",
        barracks: "üõ°Ô∏è",
        stable: "üêé",
        workshop: "üîß",
        watchtower: "üî≠",
        academy: "üéì",
        smith: "‚öíÔ∏è",
        market: "üí∞",
        wall: "üè∞"
    };

    // Gera os cart√µes com base na ordem salva
    const cards = savedOrder.map(({ id, level }) => {
        const buildingIcon = buildingIcons[id] || "‚ùì";
        const buildingName = getBuildingName(id.charAt(0).toUpperCase() + id.slice(1));

        return `
            <div class="draggable-card" data-id="${id}" data-level="${level}">
                <div class="card-icon">${buildingIcon}</div>
                <div class="card-info">
                    <span class="card-title">${buildingName}</span>
                    <span class="card-level">N√≠vel ${level}</span>
                </div>
                <button class="delete-card-btn" data-id="${id}" data-level="${level}">
                    ‚úñ
                </button>
            </div>
        `;
    }).join('');

    const content = `
    <div class="popup-wrapper">
        <div class="popup-header">
            <h2>üìú Configura√ß√µes de Constru√ß√£o</h2>
            <p>Arraste para ajustar a ordem ou exclua itens indesejados.</p>
        </div>
        <div class="popup-body">
            <div id="construction-orders-container" class="card-container">
                ${cards || `<div class="empty-message">Nenhuma configura√ß√£o de edif√≠cio salva.</div>`}
            </div>
        </div>
        <div class="popup-footer">
            <button id="start-automatic-build" class="popup-btn btn-green">Ativar Automa√ß√£o</button>
            <button id="save-order" class="popup-btn btn-blue">Salvar Ordem</button>
            <button id="close-popup-orders" class="popup-btn btn-red">Fechar</button>
        </div>
    </div>



    <style>
        /* Estilos gerais do pop-up */
        .popup-wrapper {
            width: 600px;
            background: linear-gradient(145deg, #f7f8fa, #e3e6ed);
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            padding: 20px;
            font-family: 'Arial', sans-serif;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            animation: fadeIn 0.3s ease;
        }

        .popup-header {
            text-align: center;
            border-bottom: 2px solid #3498db;
            margin-bottom: 20px;
            padding-bottom: 10px;
        }

        .popup-header h2 {
            font-size: 22px;
            color: #2c3e50;
            margin: 0;
        }

        .popup-header p {
            font-size: 14px;
            color: #7f8c8d;
            margin: 5px 0 0;
        }

        .popup-body {
            max-height: 300px;
            overflow-y: auto;
        }

        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
        }

        .draggable-card {
            background: #ffffff;
            border-radius: 10px;
            padding: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            width: 120px;
            position: relative;
            transition: transform 0.2s ease;
        }

        .draggable-card:hover {
            transform: scale(1.05);
        }

        .card-icon {
            font-size: 30px;
            margin-bottom: 10px;
        }

        .card-info {
            font-size: 14px;
            color: #2c3e50;
        }

        .card-title {
            font-weight: bold;
        }

        .card-level {
            font-size: 12px;
            color: #7f8c8d;
        }

        .delete-card-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: #e74c3c;
            color: #fff;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .delete-card-btn:hover {
            background: #c0392b;
        }

        .empty-message {
            text-align: center;
            font-size: 14px;
            color: #95a5a6;
        }

        .popup-footer {
            margin-top: 20px;
            text-align: center;
        }

        .popup-btn {
            padding: 10px 20px;
            border-radius: 10px;
            border: none;
            color: #fff;
            font-size: 14px;
            cursor: pointer;
            margin: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-green {
            background: #2ecc71;
        }

        .btn-blue {
            background: #3498db;
        }

        .btn-red {
            background: #e74c3c;
        }

        .btn-green:hover {
            background: #27ae60;
        }

        .btn-blue:hover {
            background: #2980b9;
        }

        .btn-red:hover {
            background: #c0392b;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translate(-50%, -60%);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }
    </style>
    `;

     createPopup(content);


    // Atualiza o texto do bot√£o com base no estado atual
    updateAutomationButton();

     // Adiciona o evento ao bot√£o "Ativar Automa√ß√£o" no pop-up
    document.getElementById('start-automatic-build').addEventListener('click', toggleBuildAutomation);


    // Adiciona os eventos de drag and drop com SortableJS
    addDragAndDropEvents();

    // Adiciona o evento para fechar o pop-up
    document.getElementById('close-popup-orders').addEventListener('click', closePopup);

    // Salva a ordem
    document.getElementById('save-order').addEventListener('click', saveOrder);

     // Carrega o estado da automa√ß√£o do localStorage
    isBuildAutomationActive = localStorage.getItem('isBuildAutomationActive') === 'true';

    // Adiciona o evento ao bot√£o "Ativar Automa√ß√£o" no pop-up
    document.getElementById('start-automatic-build').addEventListener('click', toggleBuildAutomation);


    // Adiciona eventos de exclus√£o aos bot√µes
    document.querySelectorAll('.delete-card-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const id = button.getAttribute('data-id');
            const level = button.getAttribute('data-level');
            deleteCard(id, level);
        });
    });
}


















































































// Vari√°vel para rastrear o √∫ltimo n√≠vel verificado para cada edif√≠cio
let lastCheckedLevels = {};
let popupClosed = false; // Flag para controlar o fechamento do popup
let observer; // Armazena o observador para permitir desconex√£o
let pageUpdated = false; // Vari√°vel para rastrear se houve uma atualiza√ß√£o relevante na p√°gina


// Configura um MutationObserver para monitorar altera√ß√µes no DOM
function setupPageObserver() {
    console.log("Configurando observador de altera√ß√µes na p√°gina...");


    const targetNode = document.querySelector('#buildings'); // Alvo: container principal de edif√≠cios
    if (!targetNode) {
        console.warn("Elemento principal de edif√≠cios n√£o encontrado. O observador n√£o ser√° configurado.");
        return;
    }


    observer = new MutationObserver(mutations => {
        for (const mutation of mutations) {
            if (mutation.type === 'childList' || mutation.type === 'attributes') {
                console.log("Altera√ß√£o detectada na p√°gina.");
                pageUpdated = true; // Sinaliza que houve uma atualiza√ß√£o
                break;
            }
        }
    });


    observer.observe(targetNode, { childList: true, attributes: true, subtree: true });
}


// Fun√ß√£o para coletar recompensas autom√°ticas
async function collectRewards() {
    console.log("Verificando recompensas autom√°ticas...");


    const questButton = document.querySelector('#new_quest');
    if (!questButton) {
        console.log("Bot√£o de recompensas n√£o encontrado.");
        return;
    }


    console.log("Abrindo o popup de recompensas...");
    questButton.click();
    await waitForPopupToOpen();


    const rewardTabButton = document.querySelector('a.tab-link[data-tab="reward-tab"]');
    if (!rewardTabButton) {
        console.log("Aba de recompensas n√£o encontrada. Fechando popup.");
        closeRewardsPopup();
        return;
    }


    console.log("Abrindo a aba de recompensas...");
    rewardTabButton.click();
    await waitForRewardsToLoad();


    // Procura por recompensas enquanto o popup estiver aberto
    while (isPopupOpen()) {
        const claimButtons = document.querySelectorAll('a.btn.btn-confirm-yes.reward-system-claim-button');
        if (claimButtons.length === 0) {
            console.log("Nenhuma recompensa dispon√≠vel. Fechando popup.");
            closeRewardsPopup();
            return;
        }


        for (const button of claimButtons) {
            if (canClaimReward(button)) {
                console.log("Reivindicando recompensa...");
                button.click();
                await wait(1500);
            } else {
                console.warn("Recompensa n√£o pode ser reivindicada: Armaz√©m cheio.");
                closeRewardsPopup();
                return;
            }
        }


        // Aguarda um pouco antes de verificar novamente
        await wait(1000);
    }
}





// Fun√ß√£o auxiliar para verificar se a recompensa pode ser reivindicada
function canClaimReward(button) {
    const rewardContainer = button.closest('.reward-container');
    return !(rewardContainer && rewardContainer.innerText.includes("Armaz√©m n√£o suporta"));
}










// Fun√ß√£o auxiliar para aguardar o popup abrir
async function waitForPopupToOpen() {
    await wait(1000);
}


// Fun√ß√£o auxiliar para aguardar as recompensas carregarem
async function waitForRewardsToLoad() {
    await wait(1000);
}


// Fun√ß√£o para fechar o popup de recompensas simulando o pressionamento da tecla ESC
function closeRewardsPopup() {
    console.log("Tentando fechar o popup...");
    if (!popupClosed) {
        console.log("Popup n√£o est√° marcado como fechado. Tentando simular ESC...");


        // Desconecta o observador temporariamente
        if (observer) {
            observer.disconnect();
            console.log("Observador desconectado temporariamente.");
        }


        const escEvent = new KeyboardEvent('keydown', {
            key: 'Escape',
            keyCode: 27,
            code: 'Escape',
            which: 27,
            bubbles: true,
            cancelable: true
        });


        document.dispatchEvent(escEvent);
        console.log("Simulando pressionamento da tecla ESC para fechar o popup.");
        popupClosed = true; // Marca que o popup foi fechado


        // Reconecta o observador ap√≥s um tempo de espera
        setTimeout(() => {
            if (observer) {
                setupPageObserver();
                console.log("Observador reconectado.");
            }
        }, 2000);
    } else {
        console.log("Popup j√° est√° marcado como fechado. Nenhuma a√ß√£o necess√°ria.");
    }
}


// Fun√ß√£o para verificar se o popup est√° aberto
function isPopupOpen() {
    const popup = document.querySelector('.popup_box');
    const isOpen = popup && popup.style.display !== 'none';
    console.log(`Verifica√ß√£o de popup: ${isOpen ? 'Aberto' : 'Fechado'}`);
    return isOpen;
}


// Fun√ß√£o para verificar n√≠veis conclu√≠dos
function checkBuildingLevels() {
    console.log("Verificando n√≠veis conclu√≠dos...");
    let levelUpdated = false;


    const buildingRows = document.querySelectorAll('.building-row');
    buildingRows.forEach(row => {
        const buildingId = row.getAttribute('data-building');
        const currentLevel = parseInt(row.querySelector('.level-indicator')?.innerText || "0", 10);


        if (lastCheckedLevels[buildingId] !== undefined && currentLevel > lastCheckedLevels[buildingId]) {
            console.log(`N√≠vel conclu√≠do para ${buildingId}: ${currentLevel}`);
            levelUpdated = true;
        }


        lastCheckedLevels[buildingId] = currentLevel;
    });


    return levelUpdated;
}


// Fun√ß√£o auxiliar para aguardar (em milissegundos)
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


































// Vari√°vel para controlar o estado da automa√ß√£o de constru√ß√£o (agora global)
let isBuildAutomationActive = false;

// Fun√ß√£o para carregar o estado salvo do localStorage e mostrar no console
function loadAutomationState() {
    // Verifica se o estado foi salvo no localStorage
    const savedState = localStorage.getItem('isBuildAutomationActive');
    if (savedState !== null) {
        // Converte o estado salvo para booleano
        isBuildAutomationActive = savedState === 'true';
    }

    // Exibe no console se a automa√ß√£o est√° ativada ou desativada
    console.log(`Automa√ß√£o de constru√ß√£o est√° ${isBuildAutomationActive ? 'Ativada' : 'Desativada'}`);

    // Atualiza o bot√£o com base no estado salvo
    updateAutomationButton();
}

// Fun√ß√£o para alternar o estado da automa√ß√£o de constru√ß√£o
function toggleBuildAutomation() {
    isBuildAutomationActive = !isBuildAutomationActive;
    console.log(`Estado alterado: ${isBuildAutomationActive ? "Ativado" : "Desativado"}`);

    // Salva o estado no localStorage
    localStorage.setItem('isBuildAutomationActive', isBuildAutomationActive);

    // Atualiza o texto do bot√£o
    updateAutomationButton();

    if (isBuildAutomationActive) {
        console.log("Automa√ß√£o de constru√ß√£o ativada!");
        executeBuildOrder();
    } else {
        console.log("Automa√ß√£o de constru√ß√£o desativada!");
    }
}

// Fun√ß√£o para atualizar o texto do bot√£o com base no estado atual
function updateAutomationButton() {
    const button = document.getElementById('start-automatic-build');
    if (button) {
        button.textContent = isBuildAutomationActive ? "Desativar Automa√ß√£o" : "Ativar Automa√ß√£o";
        console.log(`Estado do bot√£o atualizado para: ${button.textContent}`);
    } else {
        console.warn("Bot√£o 'start-automatic-build' n√£o encontrado no DOM.");
    }
}

// Carregar o estado salvo ao iniciar a p√°gina
window.addEventListener('load', loadAutomationState);








// Vari√°vel global para rastrear se a automa√ß√£o j√° foi executada ap√≥s a atualiza√ß√£o da p√°gina
let hasExecutedBuildOrder = false;

// Fun√ß√£o principal para executar a l√≥gica de constru√ß√£o autom√°tica
async function executeBuildOrder() {
    const villagePagePattern = /https:\/\/br131\.tribalwars\.com\.br\/game\.php\?village=\d+&screen=main/;

    if (!villagePagePattern.test(window.location.href) || !isBuildAutomationActive || hasExecutedBuildOrder) {
        return; // N√£o executa se a URL n√£o for a correta ou a automa√ß√£o n√£o estiver ativada
    }

    let buildOrder = [...recruitmentConfig.order]; // C√≥pia da ordem de constru√ß√£o configurada
    const executionConfig = recruitmentConfig.execution || {
        mode: "followOrder", // Pode ser 'followOrder' ou 'opportunistic'
        activateRewards: false,
        optimizeTime: false,
        premiumBudget: 0
    };
    const { mode, activateRewards, optimizeTime, premiumBudget } = executionConfig;
    let remainingPremiumBudget = premiumBudget;

    if (buildOrder.length === 0) {
        console.warn("Nenhuma ordem de constru√ß√£o foi salva. Configure a ordem primeiro!");
        return;
    }

    console.log(`Modo de execu√ß√£o: ${mode}`);
    console.log(`Recompensas autom√°ticas: ${activateRewards ? "Ativadas" : "Desativadas"}`);
    console.log(`Otimiza√ß√£o de tempo: ${optimizeTime ? "Ativada" : "Desativada"}`);
    console.log(`Or√ßamento m√°ximo de Pontos Premium: ${premiumBudget}`);

    setupPageObserver(); // Configura o observador de altera√ß√µes no DOM

    // Loop principal de automa√ß√£o
    while (buildOrder.length > 0) {
        if (activateRewards) {
            await collectRewards(); // Coleta recompensas, se ativado
        }

        // **L√≥gica para Modo SEGUIR A ORDEM**
        if (mode === "followOrder") {
            const { id, level } = buildOrder[0]; // Tenta apenas o primeiro item
            const canBuild = await tryToBuild(id, level);
            if (canBuild) {
                buildOrder.shift(); // Remove o item constru√≠do
            } else {
                console.log(`Modo "Seguir a Ordem": Constru√ß√£o pausada, aguardando ${id} n√≠vel ${level}`);
                break; // Se o edif√≠cio n√£o puder ser constru√≠do, interrompe o loop
            }
        }

        // **L√≥gica para Modo CONSTRU√á√ÉO OPORTUNA**
        if (mode === "opportunistic") {
            let builtAtLeastOne = false;
            for (let i = 0; i < buildOrder.length; i++) {
                const { id, level } = buildOrder[i];
                const canBuild = await tryToBuild(id, level);
                if (canBuild) {
                    buildOrder.splice(i, 1); // Remove o edif√≠cio constru√≠do
                    builtAtLeastOne = true;
                    break; // Ap√≥s uma constru√ß√£o bem-sucedida, interrompe o loop
                }
            }
            if (!builtAtLeastOne) {
                console.log("Modo 'Constru√ß√£o Oportuna': Nenhum edif√≠cio dispon√≠vel para constru√ß√£o.");
                break;
            }
        }

        // Aguarda a p√°gina ser atualizada antes de continuar
        while (!pageUpdated) {
            await wait(1000);
        }
        pageUpdated = false;
    }

    console.log("Constru√ß√£o autom√°tica conclu√≠da!");

    // Desconecta o observador
    if (observer) {
        observer.disconnect();
    }
    hasExecutedBuildOrder = true;
}

/**
 * Tenta construir um edif√≠cio espec√≠fico.
 * @param {string} id - Identificador do edif√≠cio.
 * @param {number} level - N√≠vel do edif√≠cio desejado.
 * @returns {boolean} - Retorna true se a constru√ß√£o foi bem-sucedida.
 */
async function tryToBuild(id, level) {
    const buildingName = getBuildingName(id.charAt(0).toUpperCase() + id.slice(1));

    // Verifica se o edif√≠cio j√° est√° completo
    const buildingStatus = document.querySelector(`.building-row[data-building="${id}"]`);
    if (buildingStatus && buildingStatus.innerText.includes("Edif√≠cio totalmente constru√≠do")) {
        console.log(`${buildingName} j√° est√° totalmente constru√≠do.`);
        return false;
    }

    // Corrige o seletor para argila, pois usa "stone" no DOM
    let dataBuildingSelector = id === "clay" ? "stone" : id;
    const buildButton = document.querySelector(`a.btn-build[data-building="${dataBuildingSelector}"][data-level-next="${level}"]`);

    // Se encontrar o bot√£o, tenta construir
    if (buildButton) {
        console.log(`Construindo: ${buildingName}, N√≠vel: ${level}`);
        buildButton.click();
        await wait(2000); // Espera 2 segundos para o clique ser processado
        await checkAndClickFinish();
        return true;
    } else {
        console.warn(`N√£o foi poss√≠vel construir ${buildingName} (N√≠vel ${level}).`);
        return false;
    }
}

// Evento para iniciar a automa√ß√£o ao carregar a p√°gina
window.addEventListener('load', () => {
    const villagePagePattern = /https:\/\/br131\.tribalwars\.com\.br\/game\.php\?village=\d+&screen=main/;
    if (villagePagePattern.test(window.location.href) && isBuildAutomationActive) {
        console.log("Automa√ß√£o ativada e executando...");
        executeBuildOrder();
    }
});
























// Fun√ß√£o para verificar e exibir o status da op√ß√£o "Reduzir automaticamente o tempo cr√≠tico de constru√ß√£o"
function checkAutoTimeReductionStatus() {
    const recruitmentConfig = JSON.parse(localStorage.getItem('recruitmentConfig')) || {};
    const executionConfig = recruitmentConfig.execution || {};
    const autoTimeReductionEnabled = executionConfig.optimizeTime === true;

    console.log("Reduzir automaticamente o tempo cr√≠tico de constru√ß√£o:", autoTimeReductionEnabled ? "Ativado" : "Desativado");
    return autoTimeReductionEnabled;
}

// Evento para inicializar a automa√ß√£o ao carregar a p√°gina
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM completamente carregado. Inicializando automa√ß√£o de constru√ß√£o...");
    initializeBuildAutomation(); // Inicializa o estado da automa√ß√£o
});


/**
 * Obt√©m o or√ßamento de Pontos Premium do localStorage.
 * @returns {number} O or√ßamento de Pontos Premium.
 */
function getPremiumBudget() {
  const recruitmentConfig = JSON.parse(localStorage.getItem('recruitmentConfig')) || {};
  const executionConfig = recruitmentConfig.execution || {};
  return executionConfig.premiumBudget || 0;
}

/**
 * Atualiza o or√ßamento de Pontos Premium no localStorage e na interface do usu√°rio.
 * @param {number} newBudget - O novo valor do or√ßamento de Pontos Premium.
 */
function updatePremiumBudget(newBudget) {
  const recruitmentConfig = JSON.parse(localStorage.getItem('recruitmentConfig')) || {};
  recruitmentConfig.execution = recruitmentConfig.execution || {};
  recruitmentConfig.execution.premiumBudget = newBudget;
  localStorage.setItem('recruitmentConfig', JSON.stringify(recruitmentConfig));

  // Atualiza a interface do usu√°rio, se houver um elemento exibindo o or√ßamento
  const premiumBudgetDisplay = document.getElementById('premium-budget-display'); // Certifique-se de que este ID existe na sua p√°gina
  if (premiumBudgetDisplay) {
    premiumBudgetDisplay.textContent = `Or√ßamento M√°ximo de Pontos Premium: ${newBudget}`;
  }
}

/**
 * Aplica a redu√ß√£o de tempo de 50% at√© que o or√ßamento seja menor que 10.
 */
function apply50PercentTimeReduction() {
    const autoTimeReductionEnabled = checkAutoTimeReductionStatus();
    if (!autoTimeReductionEnabled) {
        console.log("Redu√ß√£o autom√°tica de tempo desativada.");
        return;
    }

    let premiumBudget = getPremiumBudget();
    const buttons = document.querySelectorAll('.order_feature.btn.btn-btr');
    const clickedButtons = [];

    for (let i = 0; i < buttons.length; i++) {
        const button = buttons[i];
        const buttonId = button.getAttribute('onclick');

        if (!clickedButtons.includes(buttonId) && button.dataset.availableTo > Date.now() / 1000 && premiumBudget >= 10) {
            try {
                console.log("Clicando no bot√£o -50%...");
                button.click();
                premiumBudget -= 10;
                updatePremiumBudget(premiumBudget);
                clickedButtons.push(buttonId);
            } catch (error) {
                console.error("Erro ao clicar no bot√£o -50%:", error);
            }
        }
    }
}

// Chama a fun√ß√£o para aplicar a redu√ß√£o de tempo
apply50PercentTimeReduction();






// Fun√ß√£o para verificar e clicar no bot√£o "Finalizar"
async function checkAndClickFinish() {
    console.log("Procurando bot√£o 'Finalizar'...");


    // Localiza o bot√£o "Finalizar" no HTML
    const finishButton = document.querySelector('a.btn-instant-free'); // Altere o seletor, se necess√°rio


    if (finishButton && finishButton.innerText.trim() === "Finalizar") {
        const availableFrom = parseInt(finishButton.getAttribute('data-available-from'), 10); // Tempo dispon√≠vel
        const currentTime = Math.floor(Date.now() / 1000); // Timestamp atual


        // Verifica se o bot√£o est√° dispon√≠vel para clique
        if (currentTime >= availableFrom) {
            console.log("Bot√£o 'Finalizar' dispon√≠vel. Clicando...");
            finishButton.click(); // Clica no bot√£o "Finalizar"
            await wait(1000); // Aguarda 1 segundo antes de prosseguir
        } else {
            console.log("Bot√£o 'Finalizar' ainda n√£o est√° dispon√≠vel.");
        }
    } else {
        console.log("Nenhum bot√£o 'Finalizar' dispon√≠vel no momento.");
    }
}




























































// Fun√ß√£o para adicionar eventos de drag and drop
function addDragAndDropEvents() {
    const container = document.getElementById('construction-orders-container');


    // Configura o SortableJS
    new Sortable(container, {
        animation: 150, // Dura√ß√£o da anima√ß√£o em milissegundos
        ghostClass: 'sortable-ghost', // Classe visual durante o arrasto
        onEnd: () => {
            // Captura a nova ordem dos elementos ap√≥s o arraste
            const currentOrder = [...container.querySelectorAll('.draggable-card')].map(card => ({
                id: card.dataset.id,
                level: parseInt(card.dataset.level, 10)
            }));


            // Array para armazenar a ordem final reorganizada
            const sortedOrder = [];
            const levelsByBuilding = {};


            // Agrupa os n√≠veis por edif√≠cio
            currentOrder.forEach(({ id, level }) => {
                if (!levelsByBuilding[id]) levelsByBuilding[id] = [];
                levelsByBuilding[id].push(level);
            });


            // Ordena os n√≠veis dentro de cada edif√≠cio
            Object.keys(levelsByBuilding).forEach(id => {
                levelsByBuilding[id].sort((a, b) => a - b);
            });


            // Reconstr√≥i a ordem final respeitando a posi√ß√£o relativa dos edif√≠cios
            currentOrder.forEach(({ id }) => {
                if (levelsByBuilding[id]?.length > 0) {
                    const level = levelsByBuilding[id].shift(); // Retira o menor n√≠vel dispon√≠vel
                    sortedOrder.push({ id, level });
                }
            });


            // Atualiza a configura√ß√£o global com a nova ordem
            recruitmentConfig.order = sortedOrder;


            // Atualiza o DOM para refletir a nova ordem com os √≠cones e nomes traduzidos
            container.innerHTML = sortedOrder
                .map(({ id, level }) => {
                    const buildingIcon = getBuildingIcon(id); // Busca o √≠cone correspondente
                    const buildingName = getBuildingName(id.charAt(0).toUpperCase() + id.slice(1)); // Busca o nome no idioma correto


                    return `
                        <div class="draggable-card" data-id="${id}" data-level="${level}"
                            style="border: 1px solid #bdc3c7; border-radius: 5px; padding: 8px; background: white; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); display: flex; flex-direction: column; align-items: center; text-align: center; font-size: 12px;">
                            <div style="font-size: 24px; margin-bottom: 4px;">${buildingIcon}</div>
                            <div style="font-size: 14px; font-weight: bold; color: #34495e;">${buildingName}</div>
                            <div style="font-size: 12px; color: #7f8c8d;">N√≠vel ${level}</div>
                        </div>
                    `;
                })
                .join('');


            // Salva no localStorage ou sistema de persist√™ncia
            saveRecruitmentConfig();
        }
    });
}


// Fun√ß√£o auxiliar para determinar a posi√ß√£o onde o item ser√° inserido
function getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('.draggable-card:not(.dragging)')];


    return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - (box.top + box.height / 2); // Calcula a dist√¢ncia do centro do elemento
        if (offset < 0 && offset > closest.offset) {
            return { offset, element: child };
        } else {
            return closest;
        }
    }, { offset: Number.NEGATIVE_INFINITY }).element;
}


// Fun√ß√£o para salvar a nova ordem
function saveOrder() {
    const container = document.getElementById('construction-orders-container');


    // Captura a nova ordem dos cards
    const newOrder = [...container.querySelectorAll('.draggable-card')].map(card => ({
        id: card.dataset.id,
        level: parseInt(card.dataset.level, 10),
    }));


    // Atualiza a configura√ß√£o global com a nova ordem
    recruitmentConfig.order = newOrder;


    // Atualiza os n√≠veis m√°ximos para cada edif√≠cio
    const levels = {};
    newOrder.forEach(({ id, level }) => {
        if (!levels[id]) levels[id] = []; // Inicializa o array para os n√≠veis do edif√≠cio
        levels[id].push(level); // Adiciona o n√≠vel na ordem certa
    });


    recruitmentConfig.levels = levels;


    // Salva no localStorage ou sistema de persist√™ncia
    saveRecruitmentConfig();


    alert("Ordem de constru√ß√£o salva com sucesso!");
}


// Obt√©m os n√≠veis salvos e a ordem atual de constru√ß√£o
function syncLevelsToOrder() {
    const savedLevels = recruitmentConfig.levels || {};
    const currentOrder = recruitmentConfig.order || [];
    const newOrder = [...currentOrder]; // Copia a ordem atual


    // Adiciona os novos n√≠veis que n√£o est√£o na ordem atual
    Object.entries(savedLevels).forEach(([id, maxLevel]) => {
        const existingLevels = currentOrder
            .filter(order => order.id === id)
            .map(order => order.level);


        for (let level = 1; level <= maxLevel; level++) {
            if (!existingLevels.includes(level)) {
                newOrder.push({ id, level }); // Adiciona somente n√≠veis n√£o existentes
            }
        }
    });


    recruitmentConfig.order = newOrder; // Atualiza a ordem global
}




// Filtra a ordem para remover o item espec√≠fico
  function deleteCard(id, level) {
    // Filtra a ordem para remover o item espec√≠fico
    recruitmentConfig.order = recruitmentConfig.order.filter(order => {
        return !(order.id === id && order.level === parseInt(level, 10));
    });


    // Atualiza os n√≠veis globais
    const levels = recruitmentConfig.order.reduce((acc, { id, level }) => {
        if (!acc[id]) acc[id] = [];
        acc[id].push(level);
        return acc;
    }, {});


    // Atualiza a estrutura de n√≠veis
    recruitmentConfig.levels = Object.fromEntries(
        Object.entries(levels).map(([id, levelsArray]) => [id, Math.max(...levelsArray)])
    );


    // Salva no localStorage ou sistema de persist√™ncia
    saveRecruitmentConfig();


    // Atualiza a interface
    openConstructionOrdersPopup();
}


// Fun√ß√£o auxiliar para obter √≠cones dos edif√≠cios
function getBuildingIcon(buildingName) {
    const icons = {
        Main: "üèõÔ∏è",
        Statue: "üóø",
        Wood: "üå≤",
        Clay: "üè∫",
        Iron: "‚õìÔ∏è",
        Farm: "üåæ",
        Storage: "üì¶",
        Hide: "üèöÔ∏è",
        Barracks: "üõ°Ô∏è",
        Stable: "üêé",
        Workshop: "üîß",
        Watchtower: "üî≠",
        Academy: "üéì",
        Smith: "‚öíÔ∏è",
        Market: "üí∞",
        Wall: "üè∞"
    };
    return icons[buildingName] || "üèóÔ∏è";
}







// Adiciona o evento para o bot√£o "Ver Configura√ß√µes"
document.body.addEventListener('click', (event) => {
    if (event.target.id === 'btn-construction-orders') {
        openConstructionOrdersPopup(); // Mant√©m o comportamento atual
    }
    if (event.target.id === 'btn-add-order-by-text') {
        openAddOrderByTextPopup(); // Mant√©m o comportamento atual
    }
    if (event.target.id === 'btn-execution-config') {
        openExecutionConfigPopup(); // Abre o popup de execu√ß√£o
    }
});




// Salva as configura√ß√µes de n√≠veis desejados
function saveBuildingConfig() {
    const formElements = document.querySelectorAll('#building-config-form input[type="number"]');
    const newLevels = {};


    formElements.forEach(input => {
        const buildingId = input.id.replace('level-', ''); // Extrai o ID do edif√≠cio
        const level = parseInt(input.value, 10) || 0; // Obt√©m o valor ou 0 se inv√°lido
        if (level > 0) {
            newLevels[buildingId] = level;
        }
    });


    // Atualiza os n√≠veis globais mantendo os j√° existentes
    recruitmentConfig.levels = {
        ...recruitmentConfig.levels, // N√≠veis existentes
        ...newLevels // Novos n√≠veis configurados
    };


    // Sincroniza e adiciona os novos n√≠veis √† ordem
    syncLevelsToOrder();


    // Salva no localStorage ou sistema de persist√™ncia
    saveRecruitmentConfig();


    alert("Configura√ß√µes de n√≠veis salvas e atualizadas com sucesso!");
}




console.log(recruitmentConfig.levels);












































































// Fun√ß√£o para criar linhas de tropas organizadas
function createRecruitmentRows(troops) {
    return troops.map(({ id, name, icon }) => `
        <div style="background: white; border: 1px solid #ddd; border-radius: 8px; padding: 4px; text-align: center; box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1); font-size: 11px;">
            <div style="font-size: 18px; margin-bottom: 4px;">${icon}</div>
            <h4 style="font-size: 12px; color: #333; margin: 0;">${name}</h4>
            <div style="margin-top: 5px;">
                <label for="daily-${id}" style="font-size: 10px; color: #555;">Meta Di√°ria</label>
                <input type="number" id="daily-${id}" name="daily-${id}" value="${recruitmentConfig[`daily${id[0].toUpperCase() + id.slice(1)}`] || 0}" style="width: 95%; margin: 3px 0; padding: 3px; border: 1px solid #ccc; border-radius: 4px; font-size: 10px;">
            </div>
            <div>
                <label for="total-${id}" style="font-size: 10px; color: #555;">Meta Geral</label>
                <input type="number" id="total-${id}" name="total-${id}" value="${recruitmentConfig[`total${id[0].toUpperCase() + id.slice(1)}`] || 0}" style="width: 95%; padding: 3px; border: 1px solid #ccc; border-radius: 4px; font-size: 10px;">
            </div>
        </div>
    `).join('');
}


// Fun√ß√£o para salvar as configura√ß√µes de recrutamento
function saveRecruitmentSettings(event) {
    event.preventDefault(); // Impede o envio do formul√°rio


    // Atualiza os valores no objeto recruitmentConfig
    const troopTypes = ['spear', 'sword', 'axe', 'archer', 'scout', 'light', 'marcher', 'heavy', 'ram', 'catapult'];
    troopTypes.forEach(troop => {
        const dailyValue = parseInt(document.getElementById(`daily-${troop}`).value) || 0;
        const totalValue = parseInt(document.getElementById(`total-${troop}`).value) || 0;


        recruitmentConfig[`daily${troop[0].toUpperCase() + troop.slice(1)}`] = dailyValue;
        recruitmentConfig[`total${troop[0].toUpperCase() + troop.slice(1)}`] = totalValue;
    });


    // Salva no localStorage
    saveRecruitmentConfig();


    // Exibe a mensagem de sucesso
    const messageElement = document.getElementById('success-message');
    messageElement.style.display = 'block';
    setTimeout(() => {
        messageElement.style.display = 'none';
    }, 3000); // Mensagem desaparece ap√≥s 3 segundos
}


// Salva o objeto recruitmentConfig no localStorage
function saveRecruitmentConfig() {
    localStorage.setItem('recruitmentConfig', JSON.stringify(recruitmentConfig));
}




// Fecha o pop-up
function closePopup() {
    const popup = document.getElementById('custom-popup');
    if (popup) popup.remove();
}






// Fun√ß√£o gen√©rica para recrutar tropas
function recruitTroops(unitType, dailyGoalKey, totalGoalKey, recruitAmount, inputSelector, maxSelector, buttonSelector) {
    // Obt√©m as metas di√°rias e gerais
    const dailyGoal = recruitmentConfig[dailyGoalKey] || 0;
    const totalGoal = recruitmentConfig[totalGoalKey] || 0;


    // Campo de entrada, m√°ximo dispon√≠vel e bot√£o de recrutamento
    const inputField = document.querySelector(inputSelector);
    const maxUnits = parseInt(document.querySelector(maxSelector).textContent.replace(/[^\d]/g, '')) || 0;
    const recruitButton = document.querySelector(buttonSelector);


    if (!inputField || !recruitButton) {
        console.warn(`Campo ou bot√£o de recrutamento para ${unitType} n√£o encontrado!`);
        return;
    }


    // Verifica as metas
    if (totalGoal <= 0 || dailyGoal <= 0) {
        console.log(`Meta atingida para ${unitType}. Nenhum recrutamento realizado.`);
        return;
    }


    // Calcula o valor a recrutar (considerando di√°rio, geral, m√°ximo dispon√≠vel e o valor de recrutamento m√≠nimo)
    const recruitValue = Math.min(recruitAmount, maxUnits, dailyGoal, totalGoal);


    if (recruitValue > 0) {
        // Preenche o campo com o valor e atualiza as metas restantes
        inputField.value = recruitValue;
        recruitmentConfig[dailyGoalKey] -= recruitValue;
        recruitmentConfig[totalGoalKey] -= recruitValue;


        // Salva as novas metas no localStorage
        saveRecruitmentConfig();


        // Clica no bot√£o para recrutar
        recruitButton.click();
    } else {
        console.log(`N√£o h√° unidades suficientes para recrutar ${unitType}.`);
    }
}


// Fun√ß√£o para recrutar Exploradores
function recruitScouts() {
    recruitTroops(
        'Exploradores',          // Tipo de unidade (para mensagens de log)
        'dailyScout',            // Chave da meta di√°ria no config
        'totalScout',            // Chave da meta geral no config
        10,                      // Valor m√≠nimo para recrutar (10 exploradores por vez)
        'input[name="spy"]',     // Seletor do campo de entrada
        '#spy_0_a',              // Seletor do link que mostra o m√°ximo
        'input.btn.btn-recruit'  // Seletor do bot√£o de recrutamento
    );
}


// Fun√ß√£o para recrutar Cavalaria Leve
function recruitLightCavalry() {
    recruitTroops(
        'Cavalaria Leve',          // Tipo de unidade (para mensagens de log)
        'dailyLight',              // Chave da meta di√°ria no config
        'totalLight',              // Chave da meta geral no config
        5,                         // Valor m√≠nimo para recrutar (5 cavalarias leves por vez)
        'input[name="light"]',     // Seletor do campo de entrada
        '#light_0_a',              // Seletor do link que mostra o m√°ximo
        'input.btn.btn-recruit'    // Seletor do bot√£o de recrutamento
    );
}


// Fun√ß√£o para recrutar Lanceiros
function recruitSpearmen() {
    recruitTroops(
        'Lanceiros',               // Tipo de unidade (para mensagens de log)
        'dailySpear',              // Chave da meta di√°ria no config
        'totalSpear',              // Chave da meta geral no config
        20,                        // Valor m√≠nimo para recrutar (20 lanceiros por vez)
        'input[name="spear"]',     // Seletor do campo de entrada
        '#spear_0_a',              // Seletor do link que mostra o m√°ximo
        'input.btn.btn-recruit'    // Seletor do bot√£o de recrutamento
    );
}


// Fun√ß√£o para recrutar Espadachins
function recruitSwordsmen() {
    recruitTroops(
        'Espadachins', // Tipo de unidade (para mensagens de log)
        'dailySword',              // Chave da meta di√°ria no config
        'totalSword',              // Chave da meta geral no config
        20,                        // Valor m√≠nimo para recrutar (20 espadachins por vez)
        'input[name="sword"]',     // Seletor do campo de entrada
        '#sword_0_a',              // Seletor do link que mostra o m√°ximo
        'input.btn.btn-recruit'    // Seletor do bot√£o de recrutamento
    );
}


// Automa√ß√£o peri√≥dica
function startRecruitmentAutomation() {
    setInterval(() => {
        recruitLightCavalry(); // Recrutamento de Cavalaria Leve
        recruitSpearmen();     // Recrutamento de Lanceiros
        recruitSwordsmen();    // Recrutamento de Espadachins
        recruitScouts();       // Recrutamento de Exploradores
    }, 5000); // Executa a cada 5 segundos
}




// Inicia a automa√ß√£o de recrutamento
startRecruitmentAutomation();








// L√≥gica para salvar os valores configurados
document.body.addEventListener('click', (event) => {
    if (event.target.id === 'save-recruitment-config') {
        recruitmentConfig.dailySpear = parseInt(document.getElementById('daily-spear').value) || 0;
        recruitmentConfig.dailySword = parseInt(document.getElementById('daily-sword').value) || 0;
        recruitmentConfig.dailyAxe = parseInt(document.getElementById('daily-axe').value) || 0;
        recruitmentConfig.dailyLight = parseInt(document.getElementById('daily-light').value) || 0;


        recruitmentConfig.totalSpear = parseInt(document.getElementById('total-spear').value) || 0;
        recruitmentConfig.totalSword = parseInt(document.getElementById('total-sword').value) || 0;
        recruitmentConfig.totalAxe = parseInt(document.getElementById('total-axe').value) || 0;
        recruitmentConfig.totalLight = parseInt(document.getElementById('total-light').value) || 0;


        recruitmentConfig.autoDistribute = document.getElementById('auto-distribute').checked;


        // Salva no localStorage
        saveRecruitmentConfig();
        createPopup('<p style="font-weight: bold; font-size: 16px; color: #28a745;">Configura√ß√µes salvas com sucesso!</p>');
        setTimeout(closePopup, 2000);
    }
});








    // Salva configura√ß√µes de recrutamento
    document.body.addEventListener('click', (event) => {
        if (event.target.id === 'save-recruitment-config') {
            recruitmentConfig.spear = parseInt(document.getElementById('spear').value) || 0;
            recruitmentConfig.sword = parseInt(document.getElementById('sword').value) || 0;
            recruitmentConfig.axe = parseInt(document.getElementById('axe').value) || 0;
            recruitmentConfig.light = parseInt(document.getElementById('light').value) || 0;
            saveRecruitmentConfig();
            createPopup('<p style="font-weight: bold; font-size: 16px; color: #28a745;">Configura√ß√£o salva com sucesso!</p>');
            setTimeout(closePopup, 2000);
        }
    });


    // Evento para abrir configura√ß√£o de recrutamento
    document.body.addEventListener('click', (event) => {
        if (event.target.classList.contains('configure-recruitment')) {
            showRecruitmentConfig();
        }
    });


    // Evento para salvar fun√ß√µes selecionadas
    document.body.addEventListener('click', (event) => {
        if (event.target.id === 'save-functions') {
            const selectedFunctions = Array.from(document.querySelectorAll('#function-form input:checked')).map(input => input.value);
            activeFunctions = selectedFunctions;
            saveActiveFunctions();
            createPopup('<p style="font-weight: bold; font-size: 16px; color: #28a745;">Fun√ß√µes salvas com sucesso!</p>');
            setTimeout(closePopup, 2000);
        }
    });


    // Evento para fechar pop-up
    document.body.addEventListener('click', (event) => {
        if (event.target.id === 'close-popup') {
            closePopup();
        }
    });


    // Configura o evento de duplo clique direito
let rightClickCount = 0;
document.addEventListener('contextmenu', (event) => { // Use 'contextmenu' para clique direito
    event.preventDefault(); // Impede o menu de contexto padr√£o do navegador
    rightClickCount++;
    setTimeout(() => rightClickCount = 0, 500); // Reset ap√≥s 500ms
    if (rightClickCount === 2) {
        showFunctionSelector();
    }
});



    // Carrega dados ao iniciar o script
    loadActiveFunctions();
    loadRecruitmentConfig();
    startAutoRedirect();
})();






